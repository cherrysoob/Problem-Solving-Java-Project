/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package WardrobeOrganizerUI;
import java.awt.*;
import java.io.*;
import javax.swing.*;

/**
 *
 * @author AISHAH MAISARAH
 */
public class SeeAllItemPage extends javax.swing.JFrame {

    /**
     * Creates new form SeeAllItemPage
     */
    public SeeAllItemPage() {
        initComponents();
        setLocationRelativeTo(null); //center the JFrame
        
        // Add a WindowListener to handle the close button (X) click
        addWindowListener(new java.awt.event.WindowAdapter() { //WindowAdapter() is the parent class
            @Override //overrides method from parent class
            public void windowClosing(java.awt.event.WindowEvent e) { //windowClosing() is overriden
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Exit Confirmation", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    System.exit(0); // Exit the program
                }
            }
        });
        
        loadItems(); //display all items when the page starts
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("See All Items");
        setBackground(new java.awt.Color(204, 181, 164));
        setMinimumSize(new java.awt.Dimension(1080, 608));
        setPreferredSize(new java.awt.Dimension(1085, 625));
        setResizable(false);
        getContentPane().setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(236, 230, 223));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(236, 230, 223));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setOpaque(true);
        jScrollPane1.setViewportView(null);

        jPanel1.setBackground(new java.awt.Color(150, 129, 116));
        jPanel1.setBorder(null);
        jPanel1.setForeground(new java.awt.Color(236, 230, 223));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 30));
        jScrollPane1.setViewportView(jPanel1);
        jPanel1.setPreferredSize(new Dimension(jScrollPane1.getWidth(), jPanel1.getPreferredSize().height));

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(60, 200, 960, 362);

        jButton1.setBackground(new java.awt.Color(236, 230, 223));
        jButton1.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(77, 53, 46));
        jButton1.setText("Back ");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(59, 59, 229, 53);

        jComboBox1.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox1.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a filter ", " All ", " Category ", " Colour ", " Style ", " Season " }));
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.setOpaque(true);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(215, 133, 283, 55);
        jComboBox1.addActionListener(e -> {
            if (jComboBox1.getSelectedIndex() == 0) {
                jComboBox1.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox1.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jComboBox2.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox2.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox2.setOpaque(true);
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(505, 133, 283, 55);
        jComboBox2.addActionListener(e -> {
            if (jComboBox2.getSelectedIndex() == 0) {
                jComboBox2.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox2.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jButton2.setBackground(new java.awt.Color(236, 230, 223));
        jButton2.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(77, 53, 46));
        jButton2.setText("Search ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(795, 133, 162, 55);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SeeAllBG.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1080, 608);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        HomePage btn1 = new HomePage();
        btn1.show();
        dispose(); //completely dispose the window and its resources
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        //these arrays define the possible models for jComboBox2 based on the model chosen in jComboBox1
        String[] CATEGORY_OPTIONS = {" Select a category ", " Top ", " Bottom ", " Shoes ", " Other "};
        String[] COLOUR_OPTIONS = {" Select a colour ", " White ", " Black ", " Gray ", " Brown ", " Red ", " Blue ", " Yellow ", " Green ",  " Orange ", " Purple ", " Pink "};
        String[] STYLE_OPTIONS = {" Select a style ", " Casual ", " Formal ", " Smart Casual ", " Sport ", " Comfortable ", " Other "};
        String[] SEASON_OPTIONS = {" Select a season ", " All ", " Spring ", " Summer ", " Autumn ", " Winter "};
        String[] ALL_OPTIONS = {""};
        
        //user selects an option or model from the first dropdown menu
        int selectedIndex = jComboBox1.getSelectedIndex(); //compiler will retrieve the selected model's index
        String[] newModel;

        // Set a new model for jComboBox2 based on the index selected in jComboBox1 using switch case
        switch (selectedIndex) {
            case 2: // "Category"
                newModel = CATEGORY_OPTIONS; //the options in CATEGORY_OPTIONS will populate jComboBox2
                break;
            case 3: // "Colour"
                newModel = COLOUR_OPTIONS; //the options in COLOUR_OPTIONS will populate jComboBox2
                break;
            case 4: // "Style"
                newModel = STYLE_OPTIONS; //the options in STYLE_OPTIONS will populate jComboBox2
                break;
            case 5: // "Season"
                newModel = SEASON_OPTIONS; //the options in SEASON_OPTIONS will populate jComboBox2
                break;
            default: // "All" (case 1)
                newModel = ALL_OPTIONS; // Reset to all items
                break;
        }

        //Set the models for the second dropdown using the new models set from the switch case
        //DefaultComboBoxModel is a built in class in the Swing framework used for dynamic filtering
        //it updates one dropdown's options based on the selection in another dropdown menu
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(newModel));
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        loadItems();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeeAllItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeeAllItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeeAllItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeeAllItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SeeAllItemPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    //reads item data from wardrobe_item.txt, filter, and display the items on the panel
    private void loadItems() {
        try {
            //locate and check the file where the items are stored
            File file = new File("src\\datastorage\\wardrobe_item.txt");
            if (!file.exists() || !file.canRead()) {
                JOptionPane.showMessageDialog(this, "No items to display. File missing or unreadable.", "Info", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            //initialize file reader
            //BufferedReader fetches chunks of data from the file into a memory buffer in one go
            BufferedReader reader = new BufferedReader(new FileReader(file));

            jPanel1.removeAll(); //removes any previously displayed items from the panel

            int itemCount = 0; // Track the number of items for height calculation

            // Get selected filter from dropdown menu 1 and 2
            String selectedFilterType = (jComboBox1.getSelectedItem() != null) ? jComboBox1.getSelectedItem().toString().trim() : "";
            String selectedFilterValue = (jComboBox2.getSelectedItem() != null) ? jComboBox2.getSelectedItem().toString().trim() : "";

            if (selectedFilterType.isEmpty() || selectedFilterValue.isEmpty()) {
                selectedFilterValue = " Select an option ";
            }
            
            String line;
            while ((line = reader.readLine()) != null) { //read and process each line
                //each line in the file is split into 5 parts in an array (separated by comma)
                String[] parts = line.split(",");
                if (parts.length == 5) {
                    String category = parts[0].trim();
                    String color = parts[1].trim();
                    String style = parts[2].trim();
                    String season = parts[3].trim();
                    String imagePath = parts[4].trim();

                    //Apply filter based on selected filter type
                    //if the user selected a filter, the program checks if the current item matches the filter
                    boolean matchesFilter = true;
                    if (!selectedFilterValue.equals(" Select an option ")) {
                        switch (selectedFilterType) {
                            case "Category":
                                matchesFilter = category.equalsIgnoreCase(selectedFilterValue);
                                break;
                            case "Colour":
                                matchesFilter = color.equalsIgnoreCase(selectedFilterValue);
                                break;
                            case "Style":
                                matchesFilter = style.equalsIgnoreCase(selectedFilterValue);
                                break;
                            case "Season":
                                matchesFilter = season.equalsIgnoreCase(selectedFilterValue);
                                break;
                        }
                    }
                    //if it doesnt match, the program skips to the next line/continue
                    if (!matchesFilter) continue;

                    // Create the dynamic panel for each item
                    JPanel singleItemPanel = new JPanel(null); // Use null layout for absolute positioning
                    singleItemPanel.setBackground(new Color(236, 230, 223));
                    singleItemPanel.setPreferredSize(new Dimension(200, 220));
                    singleItemPanel.setBorder(null);

                    // Load and scale the image
                    ImageIcon icon = new ImageIcon(imagePath);
                    Image scaledImage = icon.getImage().getScaledInstance(160, 180, Image.SCALE_SMOOTH);
                    JLabel imageLabel = new JLabel(new ImageIcon(scaledImage));
                    imageLabel.setBounds(20, 20, 160, 180);

                    //initialize lineToDelete with the value of line, final means it canno be changed and become a constant reference
                    final String lineToDelete = line;

                    // Create the delete button
                    JButton deleteButton = new JButton(new ImageIcon("src/images/delete_icon.png"));
                    deleteButton.setBounds(160, 5, 35, 40); // Adjusted for proportional alignment
                    deleteButton.setBackground(new java.awt.Color(236, 230, 223));
                    deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                    deleteButton.addActionListener(e -> {
                        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                        if (confirm == JOptionPane.YES_OPTION) {
                            deleteItem(lineToDelete); // Call the method to delete the item
                        }
                    });
                    
                    // Add the delete button to the panel
                    singleItemPanel.add(deleteButton);
                    // Add components to the panel
                    singleItemPanel.add(imageLabel);

                    // Add the single item panel to the main panel
                    jPanel1.add(singleItemPanel);

                    itemCount++;
                }
            }

            //release system resources
            reader.close();

            // Dynamically update the preferred size of jPanel1
            int rows = (int) Math.ceil((double) itemCount / 4); // Assuming 4 items per row
            int panelHeight = rows * 260; // Adjust height per row (220px + spacing)
            jPanel1.setPreferredSize(new Dimension(jScrollPane1.getWidth(), panelHeight));
            // Refresh the panel
            jPanel1.revalidate(); //revalidate the panel's design (height, width, etc.)
            jPanel1.repaint(); //repaint or adjust the panel's design according to any changes
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading items: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteItem(String lineToDelete) {
        try {
            //declare the file that contains the list of wardrobe items as inputFile
            File inputFile = new File("src\\datastorage\\wardrobe_item.txt");
            //declare a temp file where the updated content will be written, will eventually replace the original file
            File tempFile = new File("src\\datastorage\\temp.txt");
            
            //read the original file (inputFile)
            //BufferedReader fetches chunks of data from the inputFile into a memory buffer in one go
            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            //write to the temp file
            //BufferedWriter collects the chunks of data in a memory buffer and writes them into the tempFile in one go
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
            
            String currentLine;
            while ((currentLine = reader.readLine()) != null) { //BufferedReader reads each line
                //BufferedWriter writes all lines except the one line to be deleted
                if (!currentLine.equals(lineToDelete)) {
                    writer.write(currentLine);
                    writer.newLine();
                }
            }
            
            //release system resources
            reader.close();
            writer.close();

            //replace the original file with the updated one, by deleting inputFile and renaming tempFile as inputFile
            if (!inputFile.delete()) {
                JOptionPane.showMessageDialog(this, "Could not delete the original file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            if (!tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(this, "Could not rename temp file.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            loadItems(); // Refresh the items display
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error deleting item: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
