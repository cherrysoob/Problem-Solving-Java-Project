/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package WardrobeOrganizerUI;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author AISHAH MAISARAH
 */
public class AddItemPage extends javax.swing.JFrame {
    
    private JFileChooser fileChooser = new JFileChooser(); //initialize a file chooser
    private boolean imageUploaded = false; //track if the image has been uploaded
    
    /**
     * Creates new form AddItemPage
     */
    public AddItemPage() {
        initComponents();
        setLocationRelativeTo(null); //center the JFrame
        
        // Add a WindowListener to handle the close button (X) click
        addWindowListener(new java.awt.event.WindowAdapter() { //WindowAdapter() is the parent class
            @Override //overrides method from parent class
            public void windowClosing(java.awt.event.WindowEvent e) { //windowClosing() is overriden
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Exit Confirmation", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    System.exit(0); // Exit the program
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Add Item");
        setMinimumSize(new java.awt.Dimension(1080, 608));
        setPreferredSize(new java.awt.Dimension(1085, 625));
        setResizable(false);
        getContentPane().setLayout(null);

        jComboBox1.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox1.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a category ", " Top ", " Bottom ", " Shoes ", " Other " }));
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.setOpaque(true);
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(583, 171, 391, 53);
        jComboBox1.addActionListener(e -> {
            if (jComboBox1.getSelectedIndex() == 0) {
                jComboBox1.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox1.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jComboBox2.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox2.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a colour ", " White ", " Black ", " Gray ", " Brown ", " Red ", " Blue ", " Yellow ", " Green ", " Orange ", " Purple ", " Pink " }));
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox2.setOpaque(true);
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(583, 240, 391, 53);
        jComboBox2.addActionListener(e -> {
            if (jComboBox2.getSelectedIndex() == 0) {
                jComboBox2.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox2.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jComboBox3.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox3.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a style ", " Casual ", " Formal ", " Smart Casual ", " Sport ", " Comfortable ", " Other " }));
        jComboBox3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox3.setOpaque(true);
        getContentPane().add(jComboBox3);
        jComboBox3.setBounds(583, 312, 391, 53);
        jComboBox3.addActionListener(e -> {
            if (jComboBox3.getSelectedIndex() == 0) {
                jComboBox3.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox3.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jComboBox4.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox4.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox4.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a season ", " All ", " Spring ", " Summer ", " Autumn ", " Winter " }));
        jComboBox4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox4.setOpaque(true);
        getContentPane().add(jComboBox4);
        jComboBox4.setBounds(583, 384, 391, 53);
        jComboBox4.addActionListener(e -> {
            if (jComboBox4.getSelectedIndex() == 0) {
                jComboBox4.setSelectedIndex(-1); //deselect the placeholder item
            }
        });

        jComboBox4.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                // Don't render the placeholder item (index 0) in the dropdown
                if (index == 0) {
                    return new JLabel("");  // Return an empty label for the placeholder
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });

        jButton1.setBackground(new java.awt.Color(236, 230, 223));
        jButton1.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(77, 53, 46));
        jButton1.setText(" Add Item ");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(443, 487, 284, 90);

        jButton2.setBackground(new java.awt.Color(236, 230, 223));
        jButton2.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(77, 53, 46));
        jButton2.setText(" Back ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(737, 487, 284, 90);

        jLabel2.setBackground(new java.awt.Color(236, 230, 223));
        jLabel2.setForeground(new java.awt.Color(77, 53, 46));
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(59, 143, 310, 322);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/AddItemBG.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1080, 608);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        // Set a file filter to allow only image files (jpg, jpeg, png)
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png"); //set file types to filter as parameters
        fileChooser.setFileFilter(filter); // Apply the filter to the file chooser
        
        //initializes the return value when the file chooser opens
        int returnValue = fileChooser.showOpenDialog(jLabel2); //jLabel2/iconLabel is the parent component for the file chooser
        
        //user selected a file/image
        if (returnValue == JFileChooser.APPROVE_OPTION) { //APPROVE means the user has selected a file, otherwise returns CANCEL
            File selectedFile = fileChooser.getSelectedFile();
            try {
                // Load and scale the image
                //the selected image is loaded into an ImageIcon
                ImageIcon originalIcon = new ImageIcon(selectedFile.getAbsolutePath());
                //resize the image to match the iconLabel's size, SCALE_SMOOTH ensures the resized image looks smooth and not pixelated
                Image scaledImage = originalIcon.getImage().getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                
                jLabel2.setIcon(scaledIcon); //set the resized image as the jLabel2's icon
                imageUploaded = true; //mark image as uploaded
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(jLabel2, "Error loading image: " + ex.getMessage()); //ex.getMessage() displays a message to describe the error
            }
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        HomePage btn2 = new HomePage();
        btn2.show();
        dispose(); //completely dispose the window and its resources
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //validation logic when the "Add Item" button is clicked
        //index 0 is reserved for placeholder value
        if (jComboBox1.getSelectedIndex() == 0 || jComboBox2.getSelectedIndex() == 0 || jComboBox3.getSelectedIndex() == 0 || jComboBox4.getSelectedIndex() == 0) {
            //show error if any dropdown menu is unselected
            JOptionPane.showMessageDialog(this, "Please select all options!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!imageUploaded) { //if boolean flag is false
            //show error if no image has been uploaded
            JOptionPane.showMessageDialog(this, "Please upload an image!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            //if all validations pass, collect data from the fields in String
            String category = (String) jComboBox1.getSelectedItem();
            String color = (String) jComboBox2.getSelectedItem();
            String style = (String) jComboBox3.getSelectedItem();
            String season = (String) jComboBox4.getSelectedItem();
            String imagePath = fileChooser.getSelectedFile().getAbsolutePath(); // Image file path
            
            //format data as a single line for storage (data are separated by commas)
            String itemData = String.format("%s,%s,%s,%s,%s", category, color, style, season, imagePath);
            
            //program tries to open the wardrobe_item.txt file (create new file if doesnt exist) with the BufferedWriter to append a new data (parameter true enables append mode)
            //BufferedWriter stores data in a memory buffer temporarily to reduces the number of disk operations (FileWriter lets each write operation access the disk)
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\AISHAH MAISARAH\\Documents\\NetBeansProjects\\TestingJava\\src\\datastorage\\wardrobe_item.txt", true))) {
                //if the file can be accessed
                writer.write(itemData); //BufferedWriter writes the formatted data (itemData) into the file
                writer.newLine(); //adds a new line for the next item data
                
                JOptionPane.showMessageDialog(this, "Item added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                // Reset combo boxes to their default values
                jComboBox1.setSelectedIndex(0);
                jComboBox2.setSelectedIndex(0);
                jComboBox3.setSelectedIndex(0);
                jComboBox4.setSelectedIndex(0);
                
                jLabel2.setIcon(null); // Remove the uploaded image from the jLabel2
                imageUploaded = false; // Reset the upload boolean flag
            } catch (IOException e) { //handles any IOException thrown while opening, writing to, or closing the file
                //if file not found, file denied access, disk full or corrupted, etc., program will throw IOException
                JOptionPane.showMessageDialog(this, "Error saving item: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } //after this block is completed, this try block with parentheses automatically closes the BufferedWriter
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddItemPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddItemPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
