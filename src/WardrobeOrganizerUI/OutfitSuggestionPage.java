/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package WardrobeOrganizerUI;
import java.awt.Image;
import javax.swing.*;
import java.io.*;
import java.util.*;

/**
 *
 * @author AISHAH MAISARAH
 */
public class OutfitSuggestionPage extends javax.swing.JFrame {

    // Declare variables at the class level
    private String top;
    private String bottom;
    private String shoes;
    private String other;
    
    /**
     * Creates new form OutfitSuggestionPage
     */
    public OutfitSuggestionPage() {
        initComponents();
        setLocationRelativeTo(null); //center the JFrame
        
        // Add a WindowListener to handle the close button (X) click
        addWindowListener(new java.awt.event.WindowAdapter() { //WindowAdapter() is the parent class
            @Override //overrides method from parent class
            public void windowClosing(java.awt.event.WindowEvent e) { //windowClosing() is overriden
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Exit Confirmation", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    System.exit(0); // Exit the program
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Outfit Suggestion");
        setMinimumSize(new java.awt.Dimension(1080, 608));
        setPreferredSize(new java.awt.Dimension(1085, 642));
        setResizable(false);
        getContentPane().setLayout(null);

        jComboBox1.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox1.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a colour ", " White ", " Black ", " Gray ", " Brown ", " Red ", " Blue ", " Yellow ", " Green ", " Orange ", " Purple ", " Pink " }));
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.setOpaque(true);
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(150, 136, 229, 55);

        jComboBox2.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox2.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a style ", " Casual ", " Formal ", " Smart Casual ", " Sport ", " Comfortable ", " Other " }));
        jComboBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox2.setOpaque(true);
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(387, 136, 229, 55);

        jComboBox3.setBackground(new java.awt.Color(236, 230, 223));
        jComboBox3.setFont(new java.awt.Font("Lucida Handwriting", 3, 16)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(77, 53, 46));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Select a season ", " All ", " Spring ", " Summer ", " Autumn ", " Winter " }));
        jComboBox3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox3.setOpaque(true);
        getContentPane().add(jComboBox3);
        jComboBox3.setBounds(622, 136, 229, 55);

        jButton1.setBackground(new java.awt.Color(236, 230, 223));
        jButton1.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(77, 53, 46));
        jButton1.setText("Search ");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(856, 136, 162, 55);

        jLabel2.setBackground(new java.awt.Color(236, 230, 223));
        jLabel2.setForeground(new java.awt.Color(77, 53, 46));
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jLabel2);
        jLabel2.setBounds(61, 203, 225, 316);

        jLabel3.setBackground(new java.awt.Color(236, 230, 223));
        jLabel3.setForeground(new java.awt.Color(77, 53, 46));
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jLabel3);
        jLabel3.setBounds(306, 203, 225, 316);

        jLabel4.setBackground(new java.awt.Color(236, 230, 223));
        jLabel4.setForeground(new java.awt.Color(77, 53, 46));
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jLabel4);
        jLabel4.setBounds(550, 203, 225, 316);

        jLabel5.setBackground(new java.awt.Color(236, 230, 223));
        jLabel5.setForeground(new java.awt.Color(77, 53, 46));
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        getContentPane().add(jLabel5);
        jLabel5.setBounds(795, 203, 225, 316);

        jButton2.setBackground(new java.awt.Color(236, 230, 223));
        jButton2.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(77, 53, 46));
        jButton2.setText(" Save outfit ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(554, 544, 229, 53);

        jButton3.setBackground(new java.awt.Color(236, 230, 223));
        jButton3.setFont(new java.awt.Font("Lucida Handwriting", 3, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(77, 53, 46));
        jButton3.setText("Back ");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setOpaque(true);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(792, 544, 229, 53);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/SuggestBG.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1080, 608);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        HomePage btn2 = new HomePage();
        btn2.show();
        dispose(); //completely dispose the window and its resources
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        generateOutfit();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        saveOutfit(top, bottom, shoes, other);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OutfitSuggestionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OutfitSuggestionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OutfitSuggestionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OutfitSuggestionPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OutfitSuggestionPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    private void generateOutfit() {
        try {
            //check if the file exists
            File file = new File("src\\datastorage\\wardrobe_item.txt");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "No wardrobe items available.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //BufferedReader fetches chunks of data from the file into a memory buffer in one go
            BufferedReader reader = new BufferedReader(new FileReader(file));
            
            //declare four array lists to store the items from different categories
            List<String> tops = new ArrayList<>();
            List<String> bottoms = new ArrayList<>();
            List<String> shoe = new ArrayList<>();
            List<String> others = new ArrayList<>();

            //Retrieve selected filters from the dropdown boxes
            String selectedColor = jComboBox1.getSelectedItem().toString(); // Colour filter
            String selectedStyle = jComboBox2.getSelectedItem().toString(); // Style filter
            String selectedSeason = jComboBox3.getSelectedItem().toString(); // Season filter
            
            String line; //current line
            //BufferedReader read the file line by line and filter items based on the user's selection
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 5) {
                    String category = parts[0]; // Top, Bottom, Shoes, Other
                    String color = parts[1];
                    String style = parts[2];
                    String season = parts[3];
                    String imagePath = parts[4];

                    //if the item's attributes dont match the user's preferences, skips to the next item
                    if (!selectedColor.equals(" Select a colour ") && !color.equalsIgnoreCase(selectedColor)) continue;
                    if (!selectedStyle.equals(" Select a style ") && !style.equalsIgnoreCase(selectedStyle)) continue;
                    if (!selectedSeason.equals(" Select a season ") && !season.equalsIgnoreCase(selectedSeason)) continue;

                    //add the current item/line into the respective array list
                    switch (category) {
                        case " Top ": tops.add(line); break; //tops ArrayList will hold the items categorized as "Top"
                        case " Bottom ": bottoms.add(line); break;
                        case " Shoes ": shoe.add(line); break;
                        case " Other ": others.add(line); break;
                        default:
                            System.out.println("Unknown category: " + category);
                    }
                }
            }
            //release system resources
            reader.close();
            
            //ensure enough items are available to create an outfit
            if (tops.isEmpty() || bottoms.isEmpty() || shoe.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Not enough items to create an outfit!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            //use Random() class to pick items from filtered lists
            top = tops.get(new Random().nextInt(tops.size()));
            bottom = bottoms.get(new Random().nextInt(bottoms.size()));
            shoes = shoe.get(new Random().nextInt(shoe.size()));
            other = !others.isEmpty() ? others.get(new Random().nextInt(others.size())) : null;

            //Display the randomly selected outfit in the respective labels
            displayItem(top, jLabel2);
            displayItem(bottom, jLabel3);
            displayItem(shoes, jLabel4);
            if (other != null) {
                displayItem(other, jLabel5);
            } else {
                jLabel5.setIcon(null); // Clear the "Other" label if no item is selected
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading items: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayItem(String item, JLabel label) {
        String[] parts = item.split(",");
        String imagePath = parts[4].trim(); //get path to the image

        // Load and display the image
        ImageIcon icon = new ImageIcon(imagePath);
        Image scaledImage = icon.getImage().getScaledInstance(jLabel2.getWidth(), jLabel2.getHeight(), Image.SCALE_SMOOTH);
        label.setIcon(new ImageIcon(scaledImage));
    }
    
    private void saveOutfit(String top, String bottom, String shoes, String other) {
        //program tries to open the saved_outfits.txt file (create new file if doesnt exist) with the BufferedWriter to append a new data (parameter true enables append mode)
        //BufferedWriter stores data in a memory buffer temporarily to reduces the number of disk operations (FileWriter lets each write operation access the disk)
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("src\\datastorage\\saved_outfits.txt", true))) {
            // Extract only the image paths from the given outfit data
            String topPath = top.split(",")[4].trim();      // Extract the image path for top
            String bottomPath = bottom.split(",")[4].trim(); // Extract the image path for bottom
            String shoesPath = shoes.split(",")[4].trim();  // Extract the image path for shoes
            String otherPath = (other != null && !other.isEmpty()) ? other.split(",")[4].trim() : ""; // Extract the image path for others if available

            // Write the outfit to the file in a consistent format (paths only, separated by ";")
            writer.write(topPath + ";" + bottomPath + ";" + shoesPath + ";" + otherPath + "\n");

            // Notify the user of a successful save
            JOptionPane.showMessageDialog(this, "Outfit saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            // Handle any errors that occur while saving
            JOptionPane.showMessageDialog(this, "Error saving outfit: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
